{
  "unpublishedPage": {
    "name": "Tasks",
    "slug": "tasks",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 4896,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 1480,
          "containerStyle": "none",
          "snapRows": 124,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 89,
          "minHeight": 1292,
          "dynamicTriggerPathList": [],
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "Tasks_utils.getCompletedTasks",
              "name": "utils.getCompletedTasks",
              "collectionId": "Tasks_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const allTasks = await getAllTasks.run();\n  const completedTasks = allTasks.filter(task => task.is_complete);\n  completedTasks.sort((a, b) => b.id - a.id);\n  return completedTasks;\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Tasks_utils.getOverdueTasks",
              "name": "utils.getOverdueTasks",
              "collectionId": "Tasks_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const allTasks = await getAllTasks.run();\n  const today = new Date().toISOString().slice(0, 10);\n  const overdueTasks = allTasks.filter(task => task.deadline > today);\n  const incompleteOverdueTasks = overdueTasks.filter(t => t.is_complete === false);\n  incompleteOverdueTasks.sort((a, b) => a.id - b.id);\n  return incompleteOverdueTasks;\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Tasks_utils.getPendingTasks",
              "name": "utils.getPendingTasks",
              "collectionId": "Tasks_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const allTasks = await getAllTasks.run();\n  const pendingTasks = allTasks.filter(task => !task.is_complete);\n  const incompletePendingTasks = pendingTasks.filter(t => t.is_complete === false);\n  incompletePendingTasks.sort((a, b) => a.id - b.id);\n  return incompletePendingTasks;\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Tasks_utils.getTodaysTasks",
              "name": "utils.getTodaysTasks",
              "collectionId": "Tasks_utils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  const allTasks = await getAllTasks.run();\n  const today = new Date().toISOString().slice(0, 10);\n  const todaysTasks = allTasks.filter(task => task.created_at.startsWith(today));\n  const incompleteTasks = todaysTasks.filter(t => t.is_complete === false);\n  incompleteTasks.sort((a, b) => b.created_at.localeCompare(a.created_at));\n  return incompleteTasks;\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "Tasks",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "64e59dbf7a61e456ffc69b1b_64e59dbf7a61e456ffc69b1f"
}